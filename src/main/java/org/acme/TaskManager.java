package org.acme;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.annotation.PostConstruct;
import jakarta.inject.Inject;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

// 1. üåü –î–æ–¥–∞—î–º–æ –∞–Ω–æ—Ç–∞—Ü—ñ—ó Quarkus: ApplicationScoped —Ç–∞ Inject
@ApplicationScoped
public class TaskManager implements TaskManagerInterface {

    // 2. üåü –ó–º—ñ–Ω—é—î–º–æ –ø–æ–ª–µ: —Ü–µ –±—É–¥–µ –∫–µ—à, —ñ –º–∏ –ø–æ–≤–∏–Ω–Ω—ñ –º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ –Ω—å–æ–≥–æ
    private List<Task> tasks;

    // 3. üåü –í–≤–æ–¥–∏–º–æ –∑–∞–ª–µ–∂–Ω—ñ—Å—Ç—å: TaskFileHandler –¥–ª—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—ñ
    @Inject
    TaskFileHandler fileHandler;

    // 4. üåü –ú–µ—Ç–æ–¥, —â–æ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –ø—ñ—Å–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç–∞: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
    @PostConstruct
    void init() {
        // –ü—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤—Å—ñ –∑–∞–¥–∞—á—ñ –∑ —Ñ–∞–π–ª—É
        this.tasks = fileHandler.load();
        if (this.tasks == null) {
            // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–∏–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –±–µ–∑–ø–µ–∫–∏
            this.tasks = Collections.synchronizedList(new ArrayList<>());
        } else {
            // –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–∏–π —Å–ø–∏—Å–æ–∫, —è–∫—â–æ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ
            this.tasks = Collections.synchronizedList(new ArrayList<>(this.tasks));
        }
    }

    // 5. ‚ùå –í–∏–¥–∞–ª—è—î–º–æ –¥–æ–ø–æ–º—ñ–∂–Ω–∏–π –º–µ—Ç–æ–¥ setAllTasks —Ç–∞ –≤–∏–¥–∞–ª—è—î–º–æ –ø–æ–ª–µ tasks = new ArrayList<>()

    // --- C (Create) ---
    @Override
    public Task addTask(String title, TaskPriority priority) {
        if (title == null || title.trim().isEmpty()) {
            // –£ –±—ñ–∑–Ω–µ—Å-—à–∞—Ä—ñ –∫—Ä–∞—â–µ –∫–∏–¥–∞—Ç–∏ –≤–∏–Ω—è—Ç–æ–∫, –∞ –Ω–µ –¥—Ä—É–∫—É–≤–∞—Ç–∏ –≤ System.out
            throw new IllegalArgumentException("–ù–∞–∑–≤–∞ –∑–∞–¥–∞—á—ñ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é.");
        }
        Task newTask = new Task(title, priority);
        tasks.add(newTask);
        fileHandler.save(tasks); // üåü –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π —Å–ø–∏—Å–æ–∫ —É —Ñ–∞–π–ª
        return newTask;
    }

    // --- R (Read) ---
    @Override
    public List<Task> getAllTasks() {
        // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –Ω–µ–∑–º—ñ–Ω–Ω—É –∫–æ–ø—ñ—é —Å–ø–∏—Å–∫—É, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –∑–æ–≤–Ω—ñ—à–Ω—å–æ—ó –º–æ–¥–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –∫–µ—à—É
        return Collections.unmodifiableList(new ArrayList<>(tasks));
    }

    // üåü –î–æ–¥–∞—î–º–æ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—é getTaskById
    @Override
    public Optional<Task> getTaskById(long id) {
        return tasks.stream()
                .filter(t -> t.getId() == id)
                .findFirst();
    }

    // --- D (Delete) ---
    // –ü–µ—Ä–µ–π–º–µ–Ω–æ–≤—É—î–º–æ, —è–∫ –≤ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ñ, —ñ –¥–æ–¥–∞—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
    @Override
    public boolean removeTask(long id) {
        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ removeIf –¥–ª—è –±—ñ–ª—å—à —á–∏—Å—Ç–æ–≥–æ –∫–æ–¥—É
        boolean removed = tasks.removeIf(t -> t.getId() == id);
        if (removed) {
            fileHandler.save(tasks); // üåü –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
        }
        return removed;
    }

    // --- U (Update) ---

    // üåü –†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –º–µ—Ç–æ–¥—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
    @Override
    public Optional<Task> updateTask(long id, String newTitle, TaskStatus newStatus, TaskPriority newPriority) {
        Optional<Task> taskOpt = getTaskById(id);

        if (taskOpt.isPresent()) {
            Task task = taskOpt.get();
            boolean changed = false;

            if (newTitle != null && !newTitle.isEmpty() && !newTitle.equals(task.getTitle())) {
                task.setTitle(newTitle);
                changed = true;
            }
            if (newStatus != null && newStatus != task.getStatus()) {
                task.setStatus(newStatus);
                changed = true;
            }
            if (newPriority != null && newPriority != task.getPriority()) {
                task.setPriority(newPriority);
                changed = true;
            }

            if (changed) {
                // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è updatedAt –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è —É —Å–µ—Ç—Ç–µ—Ä–∞—Ö Task, –∞–ª–µ —Ç—É—Ç –º–æ–∂–Ω–∞ –≥–∞—Ä–∞–Ω—Ç—É–≤–∞—Ç–∏
                task.setUpdatedAt(LocalDateTime.now());
                fileHandler.save(tasks); // üåü –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π —Å–ø–∏—Å–æ–∫
            }
            return Optional.of(task);
        }
        return Optional.empty();
    }

    // –ß–∞—Å—Ç–∫–æ–≤—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è (–∑–∞–ª–∏—à–∞—î–º–æ –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º)
    @Override
    public boolean updateTaskStatus(long id, TaskStatus newStatus) {
        Optional<Task> taskOpt = getTaskById(id);
        if (taskOpt.isPresent()) {
            taskOpt.get().setStatus(newStatus);
            fileHandler.save(tasks); // üåü –ó–±–µ—Ä—ñ–≥–∞—î–º–æ
            return true;
        }
        return false;
    }

    @Override
    public boolean updateTaskPriority(long id, TaskPriority newPriority) {
        Optional<Task> taskOpt = getTaskById(id);
        if (taskOpt.isPresent()) {
            taskOpt.get().setPriority(newPriority);
            fileHandler.save(tasks); // üåü –ó–±–µ—Ä—ñ–≥–∞—î–º–æ
            return true;
        }
        return false;
    }

    // --- –ü–æ—à—É–∫ —Ç–∞ –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è ---
    @Override
    public List<Task> findTasksByTitle(String title) {
        if (title == null || title.trim().isEmpty()) {
            return Collections.emptyList();
        }
        final String searchTitle = title.toLowerCase();
        // üåü –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∞ –ª–æ–≥—ñ–∫–∞ —á–µ—Ä–µ–∑ Stream API
        return tasks.stream()
                .filter(task -> task.getTitle().toLowerCase().contains(searchTitle))
                .collect(Collectors.toList());
    }

    @Override
    public List<Task> filterTasksByStatus(TaskStatus status) {
        return tasks.stream()
                .filter(task -> task.getStatus() == status)
                .collect(Collectors.toList());
    }

    @Override
    public List<Task> filterTasksByPriority(TaskPriority priority) {
        return tasks.stream()
                .filter(task -> task.getPriority() == priority)
                .collect(Collectors.toList());
    }

    // --- –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è ---

    // –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –¥–∞—Ç–æ—é —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è (–≤—ñ–¥ –Ω–∞–π—Å—Ç–∞—Ä—ñ—à–æ—ó –¥–æ –Ω–∞–π–Ω–æ–≤—ñ—à–æ—ó)
    @Override
    public List<Task> sortTasksByCreatedAt() {
        return tasks.stream()
                .sorted(Comparator.comparing(Task::getCreatedAt))
                .collect(Collectors.toList());
    }

    // –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–æ–º (–∑–∞ —Å–ø–∞–¥–∞–Ω–Ω—è–º: HIGH, MEDIUM, LOW, —è–∫—â–æ enum –≤–∏–∑–Ω–∞—á–µ–Ω–æ —Ç–∞–∫)
    @Override
    public List<Task> sortTasksByPriority() {
        return tasks.stream()
                .sorted(Comparator.comparing(Task::getPriority).reversed())
                .collect(Collectors.toList());
    }

    // –°–æ—Ä—Ç—É—î–º–æ –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º
    @Override
    public List<Task> sortTasksByStatus() {
        return tasks.stream()
                .sorted(Comparator.comparing(Task::getStatus))
                .collect(Collectors.toList());
    }
}