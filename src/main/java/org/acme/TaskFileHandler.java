package org.acme;

import jakarta.enterprise.context.ApplicationScoped;
import java.io.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.Scanner;
import java.util.stream.Collectors;

@ApplicationScoped // –¶—è –∞–Ω–æ—Ç–∞—Ü—ñ—è —Ç–µ–ø–µ—Ä –ø—Ä–∞—Ü—é–≤–∞—Ç–∏–º–µ –∫–æ—Ä–µ–∫—Ç–Ω–æ
public class TaskFileHandler implements FileHandler<Task> {

    // üåü –ó–ú–Ü–ù–ê 1: –†–æ–±–∏–º–æ —à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É —Å—Ç–∞—Ç–∏—á–Ω–æ—é –∫–æ–Ω—Å—Ç–∞–Ω—Ç–æ—é,
    // –æ—Å–∫—ñ–ª—å–∫–∏ –º–∏ –Ω–µ –º–æ–∂–µ–º–æ –ø–µ—Ä–µ–¥–∞—Ç–∏ –π–æ–≥–æ —á–µ—Ä–µ–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä CDI.
    private static final String FILE_PATH = "tasks.csv";

    private static final DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm:ss");

    // ‚ùå –ó–ú–Ü–ù–ê 2: –í–ò–î–ê–õ–Ø–Ñ–ú–û –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º (—Ü–µ –ø–æ—Ä—É—à—É—î CDI)
    /*
    private final String filePath;
    public TaskFileHandler(String filePath) {
        this.filePath = filePath;
    }
    */

    // üåü –¢–ê –ó–ê–õ–ò–®–ê–Ñ–ú–û –ö–û–ù–°–¢–†–£–ö–¢–û–† –ó–ê –ó–ê–ú–û–í–ß–£–í–ê–ù–ù–Ø–ú (–∞–±–æ –Ω–µ –æ–≥–æ–ª–æ—à—É—î–º–æ –∂–æ–¥–Ω–æ–≥–æ)
    public TaskFileHandler() {
        // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    }


    // --- C (Create / Save All) ---

    @Override
    public void save(List<Task> tasks) {
        try (FileWriter fileWriter = new FileWriter(FILE_PATH, false); // üåü –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É
             PrintWriter printWriter = new PrintWriter(fileWriter)) {

            printWriter.println(Task.getHeader());

            for (Task task : tasks) {
                printWriter.println(task.toString());
            }
            System.out.println("–ó–∞–¥–∞—á—ñ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ñ–∞–π–ª: " + FILE_PATH);
        } catch (IOException e) {
            System.err.println("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ —Ñ–∞–π–ª—É: " + e.getMessage());
        }
    }

    // --- R (Read / Load All) ---

    @Override
    public List<Task> load() {
        List<Task> tasks = new ArrayList<>();
        File file = new File(FILE_PATH); // üåü –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É
        if (!file.exists()) {
            System.out.println("–§–∞–π–ª " + FILE_PATH + " –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ë—É–¥–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–∏–π.");
            return tasks;
        }

        long maxId = 0;

        try (Scanner scanner = new Scanner(file)) {
            if (scanner.hasNextLine()) {
                scanner.nextLine(); // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
            }
            while (scanner.hasNextLine()) {
                String line = scanner.nextLine();
                String[] values = line.split("\\s*,\\s*");

                if (values.length == 6) {
                    try {
                        long id = Long.parseLong(values[0]);
                        String title = values[1];
                        TaskStatus status = TaskStatus.valueOf(values[2]);
                        TaskPriority priority = TaskPriority.valueOf(values[3]);
                        LocalDateTime createdAt = LocalDateTime.parse(values[4], formatter);
                        LocalDateTime updatedAt = LocalDateTime.parse(values[5], formatter);

                        tasks.add(new Task(id, title, status, priority, createdAt, updatedAt));
                        if (id > maxId) {
                            maxId = id;
                        }
                    } catch (Exception e) {
                        System.err.println("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥—É —Ä—è–¥–∫–∞: " + line);
                        System.err.println("–ü—Ä–∏—á–∏–Ω–∞: " + e.getMessage());
                    }
                }
            }
            Task.setNextId(maxId);
            System.out.println("–ó–∞–¥–∞—á—ñ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ —Ñ–∞–π–ª—É: " + FILE_PATH);
        } catch (FileNotFoundException e) {
            System.err.println("–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: " + e.getMessage());
        }
        return tasks;
    }

    // --- R (Read / Find By ID) ---
    // (–ù–µ –ø–æ—Ç—Ä–µ–±—É—î –∑–º—ñ–Ω)
    @Override
    public Optional<Task> findById(long id) {
        return load().stream()
                .filter(task -> task.getId() == id)
                .findFirst();
    }

    // --- U (Update) ---
    // (–ù–µ –ø–æ—Ç—Ä–µ–±—É—î –∑–º—ñ–Ω)
    @Override
    public void update(Task updatedTask) {
        List<Task> tasks = load();
        boolean found = false;

        for (int i = 0; i < tasks.size(); i++) {
            if (tasks.get(i).getId() == updatedTask.getId()) {
                updatedTask.setUpdatedAt(LocalDateTime.now());
                tasks.set(i, updatedTask);
                found = true;
                break;
            }
        }

        if (found) {
            save(tasks);
            System.out.println("–ó–∞–¥–∞—á–∞ –∑ ID " + updatedTask.getId() + " —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–∞.");
        } else {
            System.err.println("–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: –ó–∞–¥–∞—á–∞ –∑ ID " + updatedTask.getId() + " –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.");
        }
    }

    // --- D (Delete) ---
    // (–ù–µ –ø–æ—Ç—Ä–µ–±—É—î –∑–º—ñ–Ω)
    @Override
    public void delete(long taskId) {
        List<Task> tasks = load();
        int initialSize = tasks.size();

        List<Task> updatedTasks = tasks.stream()
                .filter(task -> task.getId() != taskId)
                .collect(Collectors.toList());

        if (updatedTasks.size() < initialSize) {
            save(updatedTasks);
            System.out.println("–ó–∞–¥–∞—á–∞ –∑ ID " + taskId + " —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–∞.");
        } else {
            System.err.println("–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è: –ó–∞–¥–∞—á–∞ –∑ ID " + taskId + " –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.");
        }
    }
}