package org.acme.repository;

import jakarta.enterprise.context.ApplicationScoped;
import org.acme.domain.Task;
import org.acme.domain.TaskPriority;
import org.acme.domain.TaskRepository;
import org.acme.domain.TaskStatus;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

// üåü –ó–ú–Ü–ù–ê 1: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ ApplicationScoped –¥–ª—è CDI
// üåü –ó–ú–Ü–ù–ê 2: –†–µ–∞–ª—ñ–∑—É—î–º–æ TaskRepository
@ApplicationScoped
public class TaskManager implements TaskRepository {

    private final List<Task> tasks = Collections.synchronizedList(new ArrayList<>());

    // –ú–µ—Ç–æ–¥ –¥–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∫–µ—à—É –∑–∑–æ–≤–Ω—ñ (–≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è PersistenceManager)
    // –¶–µ —î–¥–∏–Ω–∏–π —Å–ø–æ—Å—ñ–±, —è–∫–∏–º –¥–∞–Ω—ñ –ø–æ—Ç—Ä–∞–ø–ª—è—é—Ç—å —É Tasks
    public void setInitialTasks(List<Task> initialTasks) {
        this.tasks.clear();
        this.tasks.addAll(initialTasks);
    }

    // --- C (Create) ---
    @Override
    public Task addTask(String title, TaskPriority priority) {
        if (title == null || title.trim().isEmpty()) {
            throw new IllegalArgumentException("–ù–∞–∑–≤–∞ –∑–∞–¥–∞—á—ñ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é.");
        }
        Task newTask = new Task(title, priority);
        tasks.add(newTask);
        return newTask;
    }

    // --- R (Read) ---
    @Override
    public List<Task> getAllTasks() {
        // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ–ø—ñ—é –¥–ª—è –±–µ–∑–ø–µ–∫–∏ –ø–æ—Ç–æ–∫—ñ–≤ —Ç–∞ —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –∑–æ–≤–Ω—ñ—à–Ω—å–æ—ó –º–æ–¥–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
        return Collections.unmodifiableList(new ArrayList<>(tasks));
    }

    @Override
    public Optional<Task> getTaskById(long id) {
        return tasks.stream()
                .filter(t -> t.getId() == id)
                .findFirst();
    }

    @Override
    public List<Task> findTasksByTitle(String title) {
        if (title == null || title.trim().isEmpty()) {
            return Collections.emptyList();
        }
        final String searchTitle = title.toLowerCase();
        return tasks.stream()
                .filter(task -> task.getTitle().toLowerCase().contains(searchTitle))
                .collect(Collectors.toList());
    }

    // --- U (Update) ---
    @Override
    public Optional<Task> updateTask(long id, String newTitle, TaskStatus newStatus, TaskPriority newPriority) {
        Optional<Task> taskOpt = getTaskById(id);

        if (taskOpt.isPresent()) {
            Task task = taskOpt.get();
            boolean changed = false;

            if (newTitle != null && !newTitle.isEmpty() && !newTitle.equals(task.getTitle())) {
                task.setTitle(newTitle);
                changed = true;
            }
            if (newStatus != null && newStatus != task.getStatus()) {
                task.setStatus(newStatus);
                changed = true;
            }
            if (newPriority != null && newPriority != task.getPriority()) {
                task.setPriority(newPriority);
                changed = true;
            }

            if (changed) {
                // setUpdatedAt –≤–∂–µ –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –≤ —Å–µ—Ç—Ç–µ—Ä–∞—Ö, –∞–ª–µ –≥–∞—Ä–∞–Ω—Ç—É—î–º–æ —Ç—É—Ç
                task.setUpdatedAt(LocalDateTime.now());
            }
            return Optional.of(task);
        }
        return Optional.empty();
    }

    @Override
    public boolean updateTaskStatus(long id, TaskStatus newStatus) {
        Optional<Task> taskOpt = getTaskById(id);
        if (taskOpt.isPresent()) {
            taskOpt.get().setStatus(newStatus);
            return true;
        }
        return false;
    }

    @Override
    public boolean updateTaskPriority(long id, TaskPriority newPriority) {
        Optional<Task> taskOpt = getTaskById(id);
        if (taskOpt.isPresent()) {
            taskOpt.get().setPriority(newPriority);
            return true;
        }
        return false;
    }

    // --- D (Delete) ---
    @Override
    public boolean removeTask(long id) {
        // –í–ò–ü–†–ê–í–õ–ï–ù–û: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ removeIf –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
        return tasks.removeIf(t -> t.getId() == id);
    }

    // --- –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è ---
    @Override
    public List<Task> filterTasksByStatus(TaskStatus status) {
        return tasks.stream()
                .filter(t -> t.getStatus() == status)
                .collect(Collectors.toList());
    }

    @Override
    public List<Task> filterTasksByPriority(TaskPriority priority) {
        return tasks.stream()
                .filter(t -> t.getPriority() == priority)
                .collect(Collectors.toList());
    }

    // --- –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è ---
    @Override
    public List<Task> sortTasksByCreatedAt() {
        return tasks.stream()
                .sorted(Comparator.comparing(Task::getCreatedAt))
                .collect(Collectors.toList());
    }

    @Override
    public List<Task> sortTasksByPriority() {
        return tasks.stream()
                .sorted(Comparator.comparing(Task::getPriority).reversed())
                .collect(Collectors.toList());
    }

    @Override
    public List<Task> sortTasksByStatus() {
        return tasks.stream()
                .sorted(Comparator.comparing(Task::getStatus))
                .collect(Collectors.toList());
    }
}
